@page "/account/make-exchange"

@using Microsoft.AspNetCore.WebUtilities

@inject IExMoneyCurrenciesApi currenciesApi
@inject NavigationManager navManager

This is the page to make exchanges

@if(Currencies is null)
{
    <span>Chargement...</span>
}
else
{
    <div>
        select base currency : 
        <select name="baseCurency" id="baseCurency" @bind=@BaseCurrencyId>
            @foreach(var c in Currencies)
            {
                <option value="@c.Id">@c.Name (@c.Symbol)</option>
            }
        </select> <br>

        select change currency
        <select name="changeCurrency" id="changeCurrency" @bind=@ChangeCurrencyId>
            @foreach(var c in Currencies)
            {
                <option value="@c.Id">@c.Name (@c.Symbol)</option>
            }
        </select> <br>

        Entrer le montant: <input type="number" @bind-value=@Amount name="" id="" step="0.1"> <br>


        <button class="btn btn-outline-secondary" @onclick="ContinueToConfig">Continuer</button>
    </div>
}

@code {

    public List<Currency> Currencies { get; set; }

    public int BaseCurrencyId { get; set; }
    public int ChangeCurrencyId { get; set; }

    public double Amount { get; set; } = 0.0;

    public void ContinueToConfig()
    {
        var queries = new Dictionary<string, string>()
                .Append(new("baseCurrencyId", BaseCurrencyId.ToString()))
                .Append(new("changeCurrencyId", ChangeCurrencyId.ToString()))
                .Append(new("amount", Amount.ToString()));
    
        var nextUri = QueryHelpers.AddQueryString("/account/make-exchange/configure-payment", queries);

        navManager.NavigateTo(nextUri);
    }
    
    protected override async Task OnInitializedAsync()
    {
        //load currencies
        var response = await currenciesApi.List();
        if(response.IsSuccessStatusCode)
            Currencies = response.Content; 
    }

}

