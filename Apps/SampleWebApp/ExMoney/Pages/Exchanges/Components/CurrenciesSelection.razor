@inject IMemoryCache memCache
@inject IExMoneyCurrenciesApi currenciesApi


<form>
    @if (Currencies is null)
    {
        <center>
            <SpinnerLoader />
        </center>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                @* <Animate Animation="Animations.FlipDown" DurationMs="500"> *@
                    <div class='card mx-5 @(NtoFselected ? "border-dark" : "border-light-secondary") border' @onclick="SelectNtoF">
                        <div class="card-body p-2 pb-0">
                            <span class="ti ti-currency-naira" style="font-size: 30px; color: rgb(63, 157, 219);"></span>
                            <span class="mx-1 ti ti-arrows-exchange-2" style="font-size: 30px;"></span>
                            <span class="ti ti-currency-frank" style="font-size: 30px; color: rgb(0, 0, 0);"></span>
                        </div>
                        <hr />
                        <span  class='text-black'>Naira vers FCFA</span>
                    </div>
                @* </Animate> *@
            </div>

            <div class="col-12 text-center">
                @* <Animate Animation="Animations.FlipDown" DurationMs="500"> *@
                    <div class='card mx-5 @(FtoNselected ? "border-dark" : "border-light-secondary") border' @onclick="SelectFtoN">
                        <div class="card-body p-2 pb-0">
                            <span class="ti ti-currency-frank" style="font-size: 30px; color: rgb(63, 157, 219);"></span>
                            <span class="mx-1 ti ti-arrows-exchange-2" style="font-size: 30px;"></span>
                            <span class="ti ti-currency-naira" style="font-size: 30px; color: rgb(0, 0, 0);"></span>
                        </div>
                        <hr />
                        <span class='text-black'>FCFA vers Naira</span>
                    </div>
                @* </Animate> *@
            </div>
        </div>
    }

    @if(FtoNselected || NtoFselected)
    {
        @* <Animate Animation="Animations.FlipDown" DurationMs="500"> *@
            @* <hr class="mt-n2"> *@
            <div class='mb-3 @(Currencies is null ? "invisible": "visible")'>
                <label for="amount" class="form-label text-center d-block">Montant Ã  Convertir</label>
                <input type="number" @bind-value=@Amount id="amount" class='form-control' placeholder=" input">
            </div>
        @* </Animate> *@
    }
</form>

@code {

    public bool NtoFselected = false;
    public bool FtoNselected = false;

    public List<Currency> Currencies { get; set; }
    
    [Parameter] public int BaseCurrencyId { get; set; }
    [Parameter] public int ChangeCurrencyId { get; set; }
    [Parameter] public double Amount { get; set; }

    public void SelectNtoF()
    {
        FtoNselected = false; 
        NtoFselected = true; 
        
        BaseCurrencyId = Currencies.FirstOrDefault(c => c.Name.Contains("naira", StringComparison.OrdinalIgnoreCase)).Id;
        ChangeCurrencyId = Currencies.FirstOrDefault(c => c.Name.Contains("franc", StringComparison.OrdinalIgnoreCase)).Id;

        StateHasChanged();
    } 

    public void SelectFtoN()
    {
        FtoNselected = true; 
        NtoFselected = false; 
        
        BaseCurrencyId = Currencies.FirstOrDefault(c => c.Name.Contains("franc", StringComparison.OrdinalIgnoreCase)).Id;
        ChangeCurrencyId = Currencies.FirstOrDefault(c => c.Name.Contains("naira", StringComparison.OrdinalIgnoreCase)).Id;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //load currencies
        var cachedCurrencies = await memCache.GetOrCreateAsync<List<Currency>>("currencies", async (ce) =>
        {
            var response = await currenciesApi.List();
            if (response.IsSuccessStatusCode)
            {
                ce.SetSlidingExpiration(TimeSpan.FromMinutes(3));
                return response.Content!;
            }
            else
                return default;

        });

        if (cachedCurrencies is not null)
        {
            Currencies = cachedCurrencies;
            StateHasChanged();
        }

    }
}