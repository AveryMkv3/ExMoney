@inherits LayoutComponentBase

@attribute [Authorize]

@inject ExMoneyJsInterop jsInterop
@inject IExMoneyUsersApi usersApi
@inject KeycloakAuthenticator authenticator
@inject NavigationManager navManager

<PageTitle>Dashboard</PageTitle>

<CascadingValue Value="CurrentUserData" TValue="User">

    <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
        data-sidebar-position="fixed" data-header-position="fixed">
        <aside class="left-sidebar">
            <div>
                <div class="brand-logo d-flex align-items-center justify-content-between">
                    <a class="text-nowrap logo-img">
                        <img src="assets/images/logos/logo.jpg" width="80" height="80" alt="" />
                        <span class="fw-bolder fst-italic text-info font-monospace" style="font-size: 25px;"> <span
                                class="text-dark">Ex</span>Money</span>
                    </a>
                    <div class="close-btn d-xl-none d-block sidebartoggler cursor-pointer" id="sidebarCollapse"
                        @onclick="CloseSidebarNav">
                        <i class="ti ti-x fs-8"></i>
                    </div>
                </div>
                <AppMenu />
            </div>
        </aside>
        <div class="body-wrapper">
            <HeaderNavMenu />
            <div class="container-fluid">
                @Body
            </div>
        </div>
    </div>
</CascadingValue>


@code {
    public DateTime lastUpdate = DateTime.Now;

    public User CurrentUserData { get; set; }

    private void CloseSidebarNav()
    {
        jsInterop.CloseSidebarNav();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lastUpdate.AddMinutes(20) < DateTime.Now)
        {
            await authenticator.RefreshAllTokens();
            StateHasChanged();
        }

        if(firstRender)
        {
            CurrentUserData = await GetUserInfos();
            StateHasChanged();

            if(CurrentUserData is null){
                navManager.NavigateTo("/account-prompt", forceLoad: true);
            }
        }
    }

    private async Task<User> GetUserInfos()
    {
        var userInfos = await authenticator.GetUserInfosAsync();
        Dictionary<string, string> infos = userInfos.ToDictionary((s) => s.Type, (t) => t.Value);
        
        var id = infos["sub"];
        
        if(!string.IsNullOrWhiteSpace(id))
        {
            var response = await usersApi.GetUserById(id);

            if(response.IsSuccessStatusCode)
                return response.Content;
        }
        
        return null;
    }
}