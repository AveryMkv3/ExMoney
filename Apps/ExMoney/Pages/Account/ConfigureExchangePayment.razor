@page "/account/make-exchange/configure-payment"

@using Microsoft.AspNetCore.WebUtilities

@inject IExMoneyCurrenciesApi currenciesApi
@inject NavigationManager navManager

@if(Currencies is null)
{
    <span>Loading...</span>
}
else
{
    <span>There are @Currencies.Count() currencies available</span>
    <span>@ChangeCurrencyId</span> <br>
    <span>@Amount</span> <br>
    <span>@BaseCurrencyId</span> <br>
    <span>
        Here to configure payment... <br>
        <span>Base currency: @Currencies.Where(c => c.Id == BaseCurrencyId).FirstOrDefault()?.Symbol</span> <br>
        <span>Change currency:@Currencies.Where(c => c.Id == ChangeCurrencyId).FirstOrDefault()?.Symbol</span> <br>
        <span>Transaction Amount: @Amount</span> <br>
    </span>

    <p>
        <ul>
            <li>Calculate rate</li>
            <li>Calculate amount to pay</li>
            <li>Show amount to receive</li>
        </ul>
    </p>

    <button class="btn btn-primary btn-lg">Proceder au paiment</button>
}

@code{

    [Parameter] public int? ChangeCurrencyId { get; set; }
    [Parameter] public int? BaseCurrencyId { get; set; }
    [Parameter] public double? Amount { get; set; }

    public List<Currency> Currencies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await currenciesApi.List();
        if(response.IsSuccessStatusCode)
            Currencies = response.Content; 
    }

    protected override void OnParametersSet()
    {
        var queries = new Uri(navManager.Uri).Query;
        var queriesDict = QueryHelpers.ParseQuery(queries);
        
       try
       {
            ChangeCurrencyId = Convert.ToInt32(queriesDict["changeCurrencyId"].FirstOrDefault());
            BaseCurrencyId = Convert.ToInt32(queriesDict["baseCurrencyId"].FirstOrDefault());
            Amount = Convert.ToDouble(queriesDict["amount"].FirstOrDefault());
       }
       catch (System.Exception)
       {
            navManager.NavigateTo("/Error", true, true);
       }
    }
}
